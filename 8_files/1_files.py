# Работа с файлами
# Чтение файлов
# Логика чтения такая же, как логика записи:
# Открыть файл
# Прочесть данные
# Закрыть файл

file = open('text.txt', 'r')
# print(file.read(16))  # чтение определенного количества символов
print(file.read())  # загрузка всего файла в память
file.close()

# Чтение файлов построчно
# На практике текстовый файл содержит более одной строки. Например, вашему коду может потребоваться прочитать файл
# конфигурации, в котором сохранены данные игры или текст следующей песни вашей группы.
# Так же, как вы не прочитываете всю книгу прямо в момент открытия, ваш код не должен распарсить весь
# файл целиком при загрузке в память. Вероятно, вам потребуется перебрать содержимое файла.
file = open('text.txt', 'r')
for line in file:
    print(line)
file.close()


# Чтение файла с использованием конструкции with
# with - менеджер контекста
# Теперь по порядку о том, что происходит при выполнении данного блока:
#
# Выполняется выражение в конструкции with ... as.
#     suite
# Загружается специальный метод __exit__ для дальнейшего использования.
# Выполняется метод __enter__. Если конструкция with включает в себя слово as,
# то возвращаемое методом __enter__ значение записывается в переменную.
# Выполняется suite.
# Вызывается метод __exit__, причём неважно, выполнилось ли suite или произошло исключение.
# В этот метод передаются параметры исключения, если оно произошло, или во всех аргументах значение None,
# если исключения не было.

# Как и при записи данных, существует более короткий метод чтения из файлов с использованием конструкции with.
# Поскольку здесь не требуется вызов функции call(), это более удобно для быстрого взаимодействи
with open('text.txt', 'r') as file:
    for line in file:
        print(line)

# seek
with open('text.txt', 'r') as file:
    # Используя эту функцию с целочисленным аргументом, можно прочитать определенное количество символов.
    # При этом будут получены только первые 16 символов текста.Важно понимать, что при применении этой
    # функции несколько раз подряд будет считываться часть за частью этого текста — виртуальный курсор будет
    # сдвигаться на считанную часть текста.Его можно сдвинуть на определенную позицию, при необходимости
    # воспользовавшись методом seek().
    first_part = file.read(16)
    print(first_part)
    file.seek(4)
    second_part = file.read(16)
    print(second_part)

# Другой способ заключается в считывании файла построчно.
# Метод readline() считывает строку и, также как и с методом read() сдвигает курсор — только теперь уже на целую строку
with open('text.txt', "r") as f:
    for line in f.readlines():
        print(line)

# Однако и здесь существует более pythonic way. Он заключается в том, что сам объект io.TextIOWrapper имеет итератор,
# возвращающий строку за строкой. Благодаря этому нет необходимости считывать файл целиком,
# сохраняя его в список, а можно динамически по строкам считывать файл
with open('text.txt', "r") as f:
    for line in f:
        print(line)


# Запись в файл
# Если вам нужно записать данные в файл, следует сделать три главных шага:
# Открыть файл
# Записать в него данные
# Закрыть файл

# Запись open
file = open('example.txt', 'w')
file.write('hello world\n')
file.close()


nums = [x * x for x in range(10)]

for num in (str(x * x) for x in range(10)):
    file = open('example.txt', 'a')
    file.write(f'{num}\n')
file.close()

# Запись с with
txt = []  # Открытие файла text и запись его данных в другой файл
with open('text.txt', 'r') as file:
    for line in file:
        txt.append(line)

with open('example.txt', 'w') as file:
    for line in txt:
        file.write(line)  # Важно, что в качестве аргумента функции могут быть переданы только строки

# Есть возможность записать в файл большой объем данных, если он может быть представлен в виде списка строк.
# Здесь есть еще один нюанс, связанный с тем, что функции write() и writelines() автоматически не ставят
# символ переноса строки, и это разработчику нужно контролировать самостоятельно.
with open('example.txt', 'a') as file:
    file.write('\n\n\n\n')
    file.writelines(txt)


# Существует еще один, менее известный, способ, но, возможно, самый удобный из представленных.
# И как бы не было странно, он заключается в использовании функции print(). Сначала это утверждение может показаться
# странным, потому что общеизвестно, что с помощью нее происходит вывод в консоль. И это правда.
# Но если передать в необязательный аргумент file объект типа io.TextIOWrapper, каким и является объект файла,
# с которым мы работаем, то поток вывода функции print() перенаправляется из консоли в файл.

with open("example_print.txt", "w") as f:
    for line in txt:
        print(line, file=f)
