# Поверхностное и глубокое копирование
# Следует сразу сказать, что оператор присваивания = не создаёт копию объекта.
# Присваивание создаёт новую переменную, которая дублирует ссылку на исходный объект.
old_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
new_list = old_list
print(old_list)  # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(new_list)  # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

print(old_list is new_list)  # True - сравнение id объектов

old_list[0][0] = 0
print(old_list)  # [[0, 2, 3], [4, 5, 6], [7, 8, 9]]
print(new_list)  # [[0, 2, 3], [4, 5, 6], [7, 8, 9]]
# Если внести изменения в любой из этих список, изменятся оба.
# Но иногда нужно создать копию самого объекта, а не копию ссылки на него.

# copy() Копирует объект и возвращает поверхностную копию передаваемого аргумента.
from copy import copy
old_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
new_list = copy(old_list)
new_list.append(['A', 'A', 'A'])
print(old_list)  # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(new_list)  # [[1, 2, 3], [4, 5, 6], [7, 8, 9], ['A', 'A', 'A']]
# Старый список и новый список — разные объекты
print(old_list is new_list)  # False - сравнение id объектов
# В этом примере мы создали поверхностную копию old_list.
# Новый список (new_list) содержит ссылки на исходные вложенные объекты,
# хранящиеся в старом списке. Когда мы добавили новый вложенный объект в old_list,
# это не отразилось на new_list, потому что в последнем не было ссылки на этот новый вложенный объект.
old_list[0][0] = 'AA'
print(old_list)  # [['AA', 2, 3], [4, 5, 6], [7, 8, 9]]
print(new_list)  # [['AA', 2, 3], [4, 5, 6], [7, 8, 9], ['A', 'A', 'A']]
# Изменения затронули оба списка, потому что оба они содержат ссылки на один и тот же вложенный объект.

# deepcopy() Тоже копирует объект, но возвращает полную копию передаваемого аргумента.
# Глубокая копия создает новую и отдельную копию всего объекта или списка со своим уникальным адресом памяти.
# Это означает, что любые изменения, внесенные вами в новую копию объекта или списка,
# не будут отражаться в исходной. Этот процесс происходит следующим образом:
# сначала создается новый список или объект, а затем рекурсивно копируются все элементы из исходного в новый.
from copy import deepcopy
old_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
new_list = deepcopy(old_list)
print(old_list)  # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(new_list)  # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(old_list is new_list)  # False - сравнение id объектов
old_list[0][0] = 'AA'
print(old_list)  # [['AA', 2, 3], [4, 5, 6], [7, 8, 9]]
print(new_list)  # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# Так происходит потому, что при глубоком копировании копируются не ссылки на вложенные объекты, а сами объекты.
